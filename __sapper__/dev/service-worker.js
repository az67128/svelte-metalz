(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1564216889269;

	const files = [
		"service-worker-index.html",
		".DS_Store",
		".firebaserc",
		".well-known/assetlinks.json",
		"favicon.ico",
		"firebase.json",
		"global.css",
		"images/.DS_Store",
		"images/android-icon-144x144.png",
		"images/android-icon-192x192.png",
		"images/android-icon-36x36.png",
		"images/android-icon-48x48.png",
		"images/android-icon-72x72.png",
		"images/android-icon-96x96.png",
		"images/apple-icon-114x114.png",
		"images/apple-icon-120x120.png",
		"images/apple-icon-144x144.png",
		"images/apple-icon-152x152.png",
		"images/apple-icon-180x180.png",
		"images/apple-icon-57x57.png",
		"images/apple-icon-60x60.png",
		"images/apple-icon-72x72.png",
		"images/apple-icon-76x76.png",
		"images/apple-icon-precomposed.png",
		"images/apple-icon.png",
		"images/favicon-16x16.png",
		"images/favicon-32x32.png",
		"images/favicon-96x96.png",
		"images/ms-icon-144x144.png",
		"images/ms-icon-150x150.png",
		"images/ms-icon-310x310.png",
		"images/ms-icon-70x70.png",
		"manifest.json"
	];

	const shell = [
		"client/chunk.d1257cab.js",
		"client/client.50034add.js",
		"client/index.48c24a42.js",
		"client/sapper-dev-client.66640646.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
